
AMIT_Grad_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000768  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081a  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039d  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051a  00000000  00000000  000017af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000276  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include "Bluetooth.h"
#include "spi.h"
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	Bluetooth_Init();
  a6:	0e 94 76 00 	call	0xec	; 0xec <Bluetooth_Init>
	SPI_Init(MODE_MASTER);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Init>
	INT8U DevName="None";
	INT8U Command[10];
	INT8U i=0;
	Bluetooth_Connect(Slave,DevName);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	60 e6       	ldi	r22, 0x60	; 96
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	0e 94 8b 00 	call	0x116	; 0x116 <Bluetooth_Connect>
    while(1)
    {
        if(Bluetooth_Recieve(Command)){
			for(i=0;Command[i]!=0;i++)
  bc:	00 e0       	ldi	r16, 0x00	; 0
	INT8U Command[10];
	INT8U i=0;
	Bluetooth_Connect(Slave,DevName);
    while(1)
    {
        if(Bluetooth_Recieve(Command)){
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 b5 00 	call	0x16a	; 0x16a <Bluetooth_Recieve>
  c6:	88 23       	and	r24, r24
  c8:	d1 f3       	breq	.-12     	; 0xbe <main+0x2c>
			for(i=0;Command[i]!=0;i++)
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	88 23       	and	r24, r24
  ce:	b9 f3       	breq	.-18     	; 0xbe <main+0x2c>
  d0:	10 2f       	mov	r17, r16
			{
			SPI_Tranceive(Command[i]);	
  d2:	0e 94 ce 00 	call	0x19c	; 0x19c <SPI_Tranceive>
	INT8U i=0;
	Bluetooth_Connect(Slave,DevName);
    while(1)
    {
        if(Bluetooth_Recieve(Command)){
			for(i=0;Command[i]!=0;i++)
  d6:	1f 5f       	subi	r17, 0xFF	; 255
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	e1 0f       	add	r30, r17
  e2:	f1 1d       	adc	r31, r1
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	51 f3       	breq	.-44     	; 0xbe <main+0x2c>
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <main+0x40>

000000ec <Bluetooth_Init>:
#include "Bluetooth.h"


void Bluetooth_Init()
{
	UART_Init(38400);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	76 e9       	ldi	r23, 0x96	; 150
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Init>
	UART_SendStr("AT+UART=115200?1,0,\r\n");
  f8:	85 e6       	ldi	r24, 0x65	; 101
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 df 00 	call	0x1be	; 0x1be <UART_SendStr>
	UART_Init(115200);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	72 ec       	ldi	r23, 0xC2	; 194
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Init>
	UART_SendStr("AT+ROLE=0\r\n");
 10c:	8b e7       	ldi	r24, 0x7B	; 123
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 df 00 	call	0x1be	; 0x1be <UART_SendStr>
}
 114:	08 95       	ret

00000116 <Bluetooth_Connect>:

void Bluetooth_Connect(Connect_Mode Cmode,INT8U* DevAddr)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	eb 01       	movw	r28, r22
	if(!Cmode)
 11c:	88 23       	and	r24, r24
 11e:	29 f4       	brne	.+10     	; 0x12a <Bluetooth_Connect+0x14>
	{
		UART_SendStr("AT+ROLE=0\r\n");
 120:	8b e7       	ldi	r24, 0x7B	; 123
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 df 00 	call	0x1be	; 0x1be <UART_SendStr>
 128:	1d c0       	rjmp	.+58     	; 0x164 <Bluetooth_Connect+0x4e>
	}
	else
	{
		UART_SendStr("AT+ROLE=1\r\n");
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 df 00 	call	0x1be	; 0x1be <UART_SendStr>
		INT8U* prefix="AT+FSAD=";
		INT8U* addr=strcat(prefix,DevAddr);
 132:	83 e9       	ldi	r24, 0x93	; 147
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	be 01       	movw	r22, r28
 138:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <strcat>
		INT8U* postfix="\r\n";
		INT8U* str=strcat(addr,postfix);
 13c:	e8 2f       	mov	r30, r24
 13e:	f9 2f       	mov	r31, r25
 140:	df 01       	movw	r26, r30
 142:	0d 90       	ld	r0, X+
 144:	00 20       	and	r0, r0
 146:	e9 f7       	brne	.-6      	; 0x142 <Bluetooth_Connect+0x2c>
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	ae 1b       	sub	r26, r30
 14c:	bf 0b       	sbc	r27, r31
 14e:	a8 0f       	add	r26, r24
 150:	b9 1f       	adc	r27, r25
 152:	ec e9       	ldi	r30, 0x9C	; 156
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	23 e0       	ldi	r18, 0x03	; 3
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	e1 f7       	brne	.-8      	; 0x158 <Bluetooth_Connect+0x42>
		UART_SendStr(str);
 160:	0e 94 df 00 	call	0x1be	; 0x1be <UART_SendStr>
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <Bluetooth_Recieve>:

Bool Bluetooth_Recieve(INT8U *pu8Data)
{
	return UART_ReceiveByte_Unblock( *pu8Data);
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_ReceiveByte_Unblock>
 174:	08 95       	ret

00000176 <SPI_Init>:
*  Author: mnaguib
*/
#include "spi.h"

void SPI_Init(SPI_Mode spimode){
	switch(spimode){
 176:	88 23       	and	r24, r24
 178:	19 f0       	breq	.+6      	; 0x180 <SPI_Init+0xa>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <SPI_Init+0x22>
 17e:	07 c0       	rjmp	.+14     	; 0x18e <SPI_Init+0x18>
		case MODE_MASTER:
		/*OUTPUT PINS*/
		setBit(SPI_DDR,SPI_MOSI);
 180:	ba 9a       	sbi	0x17, 2	; 23
		setBit(SPI_DDR,SPI_SCK);
 182:	b9 9a       	sbi	0x17, 1	; 23
		setBit(SPI_DDR,SPI_SS);
 184:	b8 9a       	sbi	0x17, 0	; 23
		/*unselect slave*/
		setBit(SPI_PORT,SPI_SS);
 186:	c0 9a       	sbi	0x18, 0	; 24
		/*INPUT PINS*/
		clearBit(SPI_DDR,SPI_MISO);
 188:	bb 98       	cbi	0x17, 3	; 23
		/*MASTER MODE Select*/
		setBit(SPCR,MSTR);
 18a:	6c 9a       	sbi	0x0d, 4	; 13
		break;
 18c:	05 c0       	rjmp	.+10     	; 0x198 <SPI_Init+0x22>
		case MODE_SLAVE:
		/*OUTPUT PINS*/
		setBit(SPI_DDR,SPI_MISO);
 18e:	bb 9a       	sbi	0x17, 3	; 23
		/*INPUT PINS*/
		clearBit(SPI_DDR,SPI_MOSI);
 190:	ba 98       	cbi	0x17, 2	; 23
		clearBit(SPI_DDR,SPI_SCK);
 192:	b9 98       	cbi	0x17, 1	; 23
		clearBit(SPI_DDR,SPI_SS);
 194:	b8 98       	cbi	0x17, 0	; 23
		/*SLAVE MODE Select*/
		clearBit(SPCR,MSTR);
 196:	6c 98       	cbi	0x0d, 4	; 13
		break;
	}
	/*Enable SPI*/
	setBit(SPCR,SPE);
 198:	6e 9a       	sbi	0x0d, 6	; 13
}
 19a:	08 95       	ret

0000019c <SPI_Tranceive>:
INT8U SPI_Tranceive(INT8U u8Data){
	/*UPLOAD DR*/
	SPDR=u8Data;/*Shift Started*/
 19c:	8f b9       	out	0x0f, r24	; 15
	/*WAIT FOR SHIFT COMPLETE FLAG*/
	while(!(SPSR&(1<<SPIF)));
 19e:	77 9b       	sbis	0x0e, 7	; 14
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <SPI_Tranceive+0x2>
	/*RETURN DR*/
	return SPDR;
 1a2:	8f b1       	in	r24, 0x0f	; 15
 1a4:	08 95       	ret

000001a6 <UART_Init>:
	INT16U ubrr=0;
	ubrr=51;
	//ubrr=((8000000UL)/(16*u32Baud))-1;
	
	/* Set baud rate */
	UBRRH = (INT8U)(ubrr>>8);
 1a6:	10 bc       	out	0x20, r1	; 32
	UBRRL = (INT8U)ubrr;
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (3<<UCSZ0);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 bd       	out	0x20, r24	; 32
	

}
 1b4:	08 95       	ret

000001b6 <UART_SendByte>:

void UART_SendByte( INT8U u8Data){
	
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <UART_SendByte>
	;
	/* Put data into buffer, sends the data */
	UDR = u8Data;
 1ba:	8c b9       	out	0x0c, r24	; 12
	
	
}
 1bc:	08 95       	ret

000001be <UART_SendStr>:
void UART_SendStr(INT8U *pu8Data){
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
	int i;
	for(i=0;pu8Data[i]!='\0';i++){
 1c4:	88 81       	ld	r24, Y
 1c6:	88 23       	and	r24, r24
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <UART_SendStr+0x18>
	/* Put data into buffer, sends the data */
	UDR = u8Data;
	
	
}
void UART_SendStr(INT8U *pu8Data){
 1ca:	21 96       	adiw	r28, 0x01	; 1
	int i;
	for(i=0;pu8Data[i]!='\0';i++){
		UART_SendByte(pu8Data[i]);
 1cc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UART_SendByte>
	
	
}
void UART_SendStr(INT8U *pu8Data){
	int i;
	for(i=0;pu8Data[i]!='\0';i++){
 1d0:	89 91       	ld	r24, Y+
 1d2:	88 23       	and	r24, r24
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <UART_SendStr+0xe>
		UART_SendByte(pu8Data[i]);
	}
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <UART_ReceiveByte>:

INT8U UART_ReceiveByte(){
	INT8U u8Data	=0;
	
	/* Wait for empty transmit buffer */
	while ( !(UCSRA & (1<<RXC)) )
 1dc:	5f 9b       	sbis	0x0b, 7	; 11
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <UART_ReceiveByte>
	;
	/* Put data into buffer, sends the data */
	u8Data=UDR;
 1e0:	8c b1       	in	r24, 0x0c	; 12
	
	
	return u8Data;
}
 1e2:	08 95       	ret

000001e4 <UART_ReceiveByte_Unblock>:

Bool UART_ReceiveByte_Unblock( INT8U *pu8Data){
	Bool result=FALSE;
	
	if((UCSRA & (1<<RXC)) )
 1e4:	5f 9b       	sbis	0x0b, 7	; 11
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <UART_ReceiveByte_Unblock+0xe>
	{
		result=TRUE;
		(*pu8Data)=UDR;
 1e8:	2c b1       	in	r18, 0x0c	; 12
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
Bool UART_ReceiveByte_Unblock( INT8U *pu8Data){
	Bool result=FALSE;
	
	if((UCSRA & (1<<RXC)) )
	{
		result=TRUE;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	08 95       	ret
	
	return u8Data;
}

Bool UART_ReceiveByte_Unblock( INT8U *pu8Data){
	Bool result=FALSE;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
		(*pu8Data)=UDR;
	}
	
	
	return result;
}
 1f4:	08 95       	ret

000001f6 <strcat>:
 1f6:	fb 01       	movw	r30, r22
 1f8:	dc 01       	movw	r26, r24
 1fa:	0d 90       	ld	r0, X+
 1fc:	00 20       	and	r0, r0
 1fe:	e9 f7       	brne	.-6      	; 0x1fa <strcat+0x4>
 200:	11 97       	sbiw	r26, 0x01	; 1
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	00 20       	and	r0, r0
 208:	e1 f7       	brne	.-8      	; 0x202 <strcat+0xc>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
